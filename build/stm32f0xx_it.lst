ARM GAS  /tmp/ccvM9wLY.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f0xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.p2align 2,,3
  18              		.global	NMI_Handler
  19              		.arch armv6s-m
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  23              		.fpu softvfp
  25              	NMI_Handler:
  26              	.LFB37:
  27              		.file 1 "Src/stm32f0xx_it.c"
   1:Src/stm32f0xx_it.c **** /* USER CODE BEGIN Header */
   2:Src/stm32f0xx_it.c **** /**
   3:Src/stm32f0xx_it.c ****   ******************************************************************************
   4:Src/stm32f0xx_it.c ****   * @file    stm32f0xx_it.c
   5:Src/stm32f0xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Src/stm32f0xx_it.c ****   ******************************************************************************
   7:Src/stm32f0xx_it.c ****   *
   8:Src/stm32f0xx_it.c ****   * COPYRIGHT(c) 2019 STMicroelectronics
   9:Src/stm32f0xx_it.c ****   *
  10:Src/stm32f0xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  11:Src/stm32f0xx_it.c ****   * are permitted provided that the following conditions are met:
  12:Src/stm32f0xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  13:Src/stm32f0xx_it.c ****   *      this list of conditions and the following disclaimer.
  14:Src/stm32f0xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  15:Src/stm32f0xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  16:Src/stm32f0xx_it.c ****   *      and/or other materials provided with the distribution.
  17:Src/stm32f0xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  18:Src/stm32f0xx_it.c ****   *      may be used to endorse or promote products derived from this software
  19:Src/stm32f0xx_it.c ****   *      without specific prior written permission.
  20:Src/stm32f0xx_it.c ****   *
  21:Src/stm32f0xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Src/stm32f0xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Src/stm32f0xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  24:Src/stm32f0xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  25:Src/stm32f0xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  26:Src/stm32f0xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  27:Src/stm32f0xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  28:Src/stm32f0xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  29:Src/stm32f0xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  30:Src/stm32f0xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  31:Src/stm32f0xx_it.c ****   *
ARM GAS  /tmp/ccvM9wLY.s 			page 2


  32:Src/stm32f0xx_it.c ****   ******************************************************************************
  33:Src/stm32f0xx_it.c ****   */
  34:Src/stm32f0xx_it.c **** /* USER CODE END Header */
  35:Src/stm32f0xx_it.c **** 
  36:Src/stm32f0xx_it.c **** /* Includes ------------------------------------------------------------------*/
  37:Src/stm32f0xx_it.c **** #include "main.h"
  38:Src/stm32f0xx_it.c **** #include "stm32f0xx_it.h"
  39:Src/stm32f0xx_it.c **** #include "cmsis_os.h"
  40:Src/stm32f0xx_it.c **** /* Private includes ----------------------------------------------------------*/
  41:Src/stm32f0xx_it.c **** /* USER CODE BEGIN Includes */
  42:Src/stm32f0xx_it.c **** /* USER CODE END Includes */
  43:Src/stm32f0xx_it.c **** 
  44:Src/stm32f0xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  45:Src/stm32f0xx_it.c **** /* USER CODE BEGIN TD */
  46:Src/stm32f0xx_it.c **** 
  47:Src/stm32f0xx_it.c **** /* USER CODE END TD */
  48:Src/stm32f0xx_it.c **** 
  49:Src/stm32f0xx_it.c **** /* Private define ------------------------------------------------------------*/
  50:Src/stm32f0xx_it.c **** /* USER CODE BEGIN PD */
  51:Src/stm32f0xx_it.c ****  
  52:Src/stm32f0xx_it.c **** /* USER CODE END PD */
  53:Src/stm32f0xx_it.c **** 
  54:Src/stm32f0xx_it.c **** /* Private macro -------------------------------------------------------------*/
  55:Src/stm32f0xx_it.c **** /* USER CODE BEGIN PM */
  56:Src/stm32f0xx_it.c **** 
  57:Src/stm32f0xx_it.c **** /* USER CODE END PM */
  58:Src/stm32f0xx_it.c **** 
  59:Src/stm32f0xx_it.c **** /* Private variables ---------------------------------------------------------*/
  60:Src/stm32f0xx_it.c **** /* USER CODE BEGIN PV */
  61:Src/stm32f0xx_it.c **** 
  62:Src/stm32f0xx_it.c **** /* USER CODE END PV */
  63:Src/stm32f0xx_it.c **** 
  64:Src/stm32f0xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  65:Src/stm32f0xx_it.c **** /* USER CODE BEGIN PFP */
  66:Src/stm32f0xx_it.c **** 
  67:Src/stm32f0xx_it.c **** /* USER CODE END PFP */
  68:Src/stm32f0xx_it.c **** 
  69:Src/stm32f0xx_it.c **** /* Private user code ---------------------------------------------------------*/
  70:Src/stm32f0xx_it.c **** /* USER CODE BEGIN 0 */
  71:Src/stm32f0xx_it.c **** 
  72:Src/stm32f0xx_it.c **** /* USER CODE END 0 */
  73:Src/stm32f0xx_it.c **** 
  74:Src/stm32f0xx_it.c **** /* External variables --------------------------------------------------------*/
  75:Src/stm32f0xx_it.c **** extern DMA_HandleTypeDef hdma_usart4_tx;
  76:Src/stm32f0xx_it.c **** extern UART_HandleTypeDef huart2;
  77:Src/stm32f0xx_it.c **** extern UART_HandleTypeDef huart4;
  78:Src/stm32f0xx_it.c **** extern UART_HandleTypeDef huart6;
  79:Src/stm32f0xx_it.c **** extern TIM_HandleTypeDef htim1;
  80:Src/stm32f0xx_it.c **** 
  81:Src/stm32f0xx_it.c **** /* USER CODE BEGIN EV */
  82:Src/stm32f0xx_it.c **** 
  83:Src/stm32f0xx_it.c **** /* USER CODE END EV */
  84:Src/stm32f0xx_it.c **** 
  85:Src/stm32f0xx_it.c **** /******************************************************************************/
  86:Src/stm32f0xx_it.c **** /*           Cortex-M0 Processor Interruption and Exception Handlers          */ 
  87:Src/stm32f0xx_it.c **** /******************************************************************************/
  88:Src/stm32f0xx_it.c **** /**
ARM GAS  /tmp/ccvM9wLY.s 			page 3


  89:Src/stm32f0xx_it.c ****   * @brief This function handles Non maskable interrupt.
  90:Src/stm32f0xx_it.c ****   */
  91:Src/stm32f0xx_it.c **** void NMI_Handler(void)
  92:Src/stm32f0xx_it.c **** {
  28              		.loc 1 92 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  93:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  94:Src/stm32f0xx_it.c **** 
  95:Src/stm32f0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  96:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  97:Src/stm32f0xx_it.c **** 
  98:Src/stm32f0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  99:Src/stm32f0xx_it.c **** }
  33              		.loc 1 99 1 view .LVU1
  34              		@ sp needed
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE37:
  39 0002 C046     		.section	.text.HardFault_Handler,"ax",%progbits
  40              		.align	1
  41              		.p2align 2,,3
  42              		.global	HardFault_Handler
  43              		.syntax unified
  44              		.code	16
  45              		.thumb_func
  46              		.fpu softvfp
  48              	HardFault_Handler:
  49              	.LFB38:
 100:Src/stm32f0xx_it.c **** 
 101:Src/stm32f0xx_it.c **** /**
 102:Src/stm32f0xx_it.c ****   * @brief This function handles Hard fault interrupt.
 103:Src/stm32f0xx_it.c ****   */
 104:Src/stm32f0xx_it.c **** void HardFault_Handler(void)
 105:Src/stm32f0xx_it.c **** {
  50              		.loc 1 105 1 view -0
  51              		.cfi_startproc
  52              		@ Volatile: function does not return.
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
  56              	.L4:
 106:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
 107:Src/stm32f0xx_it.c **** 
 108:Src/stm32f0xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
 109:Src/stm32f0xx_it.c ****   while (1)
  57              		.loc 1 109 3 discriminator 1 view .LVU3
 110:Src/stm32f0xx_it.c ****   {
 111:Src/stm32f0xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
 112:Src/stm32f0xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
 113:Src/stm32f0xx_it.c ****   }
  58              		.loc 1 113 3 discriminator 1 view .LVU4
  59 0000 FEE7     		b	.L4
  60              		.cfi_endproc
  61              	.LFE38:
ARM GAS  /tmp/ccvM9wLY.s 			page 4


  63 0002 C046     		.section	.text.EXTI4_15_IRQHandler,"ax",%progbits
  64              		.align	1
  65              		.p2align 2,,3
  66              		.global	EXTI4_15_IRQHandler
  67              		.syntax unified
  68              		.code	16
  69              		.thumb_func
  70              		.fpu softvfp
  72              	EXTI4_15_IRQHandler:
  73              	.LFB39:
 114:Src/stm32f0xx_it.c **** }
 115:Src/stm32f0xx_it.c **** 
 116:Src/stm32f0xx_it.c **** /******************************************************************************/
 117:Src/stm32f0xx_it.c **** /* STM32F0xx Peripheral Interrupt Handlers                                    */
 118:Src/stm32f0xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 119:Src/stm32f0xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 120:Src/stm32f0xx_it.c **** /* please refer to the startup file (startup_stm32f0xx.s).                    */
 121:Src/stm32f0xx_it.c **** /******************************************************************************/
 122:Src/stm32f0xx_it.c **** 
 123:Src/stm32f0xx_it.c **** /**
 124:Src/stm32f0xx_it.c ****   * @brief This function handles EXTI line 4 to 15 interrupts.
 125:Src/stm32f0xx_it.c ****   */
 126:Src/stm32f0xx_it.c **** void EXTI4_15_IRQHandler(void)
 127:Src/stm32f0xx_it.c **** {
  74              		.loc 1 127 1 view -0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
 128:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN EXTI4_15_IRQn 0 */
 129:Src/stm32f0xx_it.c **** 
 130:Src/stm32f0xx_it.c ****   /* USER CODE END EXTI4_15_IRQn 0 */
 131:Src/stm32f0xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
  78              		.loc 1 131 3 view .LVU6
 127:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN EXTI4_15_IRQn 0 */
  79              		.loc 1 127 1 is_stmt 0 view .LVU7
  80 0000 10B5     		push	{r4, lr}
  81              	.LCFI0:
  82              		.cfi_def_cfa_offset 8
  83              		.cfi_offset 4, -8
  84              		.cfi_offset 14, -4
  85              		.loc 1 131 3 view .LVU8
  86 0002 2020     		movs	r0, #32
  87 0004 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
  88              	.LVL0:
 132:Src/stm32f0xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
  89              		.loc 1 132 3 is_stmt 1 view .LVU9
  90 0008 8020     		movs	r0, #128
  91 000a 8001     		lsls	r0, r0, #6
  92 000c FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
  93              	.LVL1:
 133:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN EXTI4_15_IRQn 1 */
 134:Src/stm32f0xx_it.c ****     
 135:Src/stm32f0xx_it.c ****    HAL_GPIO_TogglePin(TargetLed_GPIO_Port , TargetLed_Pin); 
  94              		.loc 1 135 4 view .LVU10
  95 0010 9020     		movs	r0, #144
  96 0012 2021     		movs	r1, #32
  97 0014 C005     		lsls	r0, r0, #23
ARM GAS  /tmp/ccvM9wLY.s 			page 5


  98 0016 FFF7FEFF 		bl	HAL_GPIO_TogglePin
  99              	.LVL2:
 136:Src/stm32f0xx_it.c **** 
 137:Src/stm32f0xx_it.c ****     
 138:Src/stm32f0xx_it.c ****   /* USER CODE END EXTI4_15_IRQn 1 */
 139:Src/stm32f0xx_it.c **** }
 100              		.loc 1 139 1 is_stmt 0 view .LVU11
 101              		@ sp needed
 102 001a 10BD     		pop	{r4, pc}
 103              		.cfi_endproc
 104              	.LFE39:
 106              		.section	.text.DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler,"ax",%progbits
 107              		.align	1
 108              		.p2align 2,,3
 109              		.global	DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler
 110              		.syntax unified
 111              		.code	16
 112              		.thumb_func
 113              		.fpu softvfp
 115              	DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler:
 116              	.LFB40:
 140:Src/stm32f0xx_it.c **** 
 141:Src/stm32f0xx_it.c **** /**
 142:Src/stm32f0xx_it.c ****   * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
 143:Src/stm32f0xx_it.c ****   */
 144:Src/stm32f0xx_it.c **** void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
 145:Src/stm32f0xx_it.c **** {
 117              		.loc 1 145 1 is_stmt 1 view -0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 146:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
 147:Src/stm32f0xx_it.c **** 
 148:Src/stm32f0xx_it.c ****   /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
 149:Src/stm32f0xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart4_tx);
 121              		.loc 1 149 3 view .LVU13
 145:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
 122              		.loc 1 145 1 is_stmt 0 view .LVU14
 123 0000 10B5     		push	{r4, lr}
 124              	.LCFI1:
 125              		.cfi_def_cfa_offset 8
 126              		.cfi_offset 4, -8
 127              		.cfi_offset 14, -4
 128              		.loc 1 149 3 view .LVU15
 129 0002 0248     		ldr	r0, .L7
 130 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 131              	.LVL3:
 150:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
 151:Src/stm32f0xx_it.c **** 
 152:Src/stm32f0xx_it.c ****   /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
 153:Src/stm32f0xx_it.c **** }
 132              		.loc 1 153 1 view .LVU16
 133              		@ sp needed
 134 0008 10BD     		pop	{r4, pc}
 135              	.L8:
 136 000a C046     		.align	2
 137              	.L7:
ARM GAS  /tmp/ccvM9wLY.s 			page 6


 138 000c 00000000 		.word	hdma_usart4_tx
 139              		.cfi_endproc
 140              	.LFE40:
 142              		.section	.text.TIM1_BRK_UP_TRG_COM_IRQHandler,"ax",%progbits
 143              		.align	1
 144              		.p2align 2,,3
 145              		.global	TIM1_BRK_UP_TRG_COM_IRQHandler
 146              		.syntax unified
 147              		.code	16
 148              		.thumb_func
 149              		.fpu softvfp
 151              	TIM1_BRK_UP_TRG_COM_IRQHandler:
 152              	.LFB41:
 154:Src/stm32f0xx_it.c **** 
 155:Src/stm32f0xx_it.c **** /**
 156:Src/stm32f0xx_it.c ****   * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
 157:Src/stm32f0xx_it.c ****   */
 158:Src/stm32f0xx_it.c **** void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
 159:Src/stm32f0xx_it.c **** {
 153              		.loc 1 159 1 is_stmt 1 view -0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 0, uses_anonymous_args = 0
 160:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */
 161:Src/stm32f0xx_it.c **** 
 162:Src/stm32f0xx_it.c ****   /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
 163:Src/stm32f0xx_it.c ****   HAL_TIM_IRQHandler(&htim1);
 157              		.loc 1 163 3 view .LVU18
 159:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */
 158              		.loc 1 159 1 is_stmt 0 view .LVU19
 159 0000 10B5     		push	{r4, lr}
 160              	.LCFI2:
 161              		.cfi_def_cfa_offset 8
 162              		.cfi_offset 4, -8
 163              		.cfi_offset 14, -4
 164              		.loc 1 163 3 view .LVU20
 165 0002 0248     		ldr	r0, .L10
 166 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 167              	.LVL4:
 164:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */
 165:Src/stm32f0xx_it.c **** 
 166:Src/stm32f0xx_it.c ****   /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
 167:Src/stm32f0xx_it.c **** }
 168              		.loc 1 167 1 view .LVU21
 169              		@ sp needed
 170 0008 10BD     		pop	{r4, pc}
 171              	.L11:
 172 000a C046     		.align	2
 173              	.L10:
 174 000c 00000000 		.word	htim1
 175              		.cfi_endproc
 176              	.LFE41:
 178              		.section	.text.USART2_IRQHandler,"ax",%progbits
 179              		.align	1
 180              		.p2align 2,,3
 181              		.global	USART2_IRQHandler
 182              		.syntax unified
ARM GAS  /tmp/ccvM9wLY.s 			page 7


 183              		.code	16
 184              		.thumb_func
 185              		.fpu softvfp
 187              	USART2_IRQHandler:
 188              	.LFB42:
 168:Src/stm32f0xx_it.c **** 
 169:Src/stm32f0xx_it.c **** /**
 170:Src/stm32f0xx_it.c ****   * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI li
 171:Src/stm32f0xx_it.c ****   */
 172:Src/stm32f0xx_it.c **** void USART2_IRQHandler(void)
 173:Src/stm32f0xx_it.c **** {
 189              		.loc 1 173 1 is_stmt 1 view -0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 174:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 0 */
 175:Src/stm32f0xx_it.c **** 
 176:Src/stm32f0xx_it.c ****   /* USER CODE END USART2_IRQn 0 */
 177:Src/stm32f0xx_it.c ****   HAL_UART_IRQHandler(&huart2);
 193              		.loc 1 177 3 view .LVU23
 173:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 0 */
 194              		.loc 1 173 1 is_stmt 0 view .LVU24
 195 0000 10B5     		push	{r4, lr}
 196              	.LCFI3:
 197              		.cfi_def_cfa_offset 8
 198              		.cfi_offset 4, -8
 199              		.cfi_offset 14, -4
 200              		.loc 1 177 3 view .LVU25
 201 0002 0248     		ldr	r0, .L13
 202 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 203              	.LVL5:
 178:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 1 */
 179:Src/stm32f0xx_it.c **** 
 180:Src/stm32f0xx_it.c ****   /* USER CODE END USART2_IRQn 1 */
 181:Src/stm32f0xx_it.c **** }
 204              		.loc 1 181 1 view .LVU26
 205              		@ sp needed
 206 0008 10BD     		pop	{r4, pc}
 207              	.L14:
 208 000a C046     		.align	2
 209              	.L13:
 210 000c 00000000 		.word	huart2
 211              		.cfi_endproc
 212              	.LFE42:
 214              		.section	.text.USART3_8_IRQHandler,"ax",%progbits
 215              		.align	1
 216              		.p2align 2,,3
 217              		.global	USART3_8_IRQHandler
 218              		.syntax unified
 219              		.code	16
 220              		.thumb_func
 221              		.fpu softvfp
 223              	USART3_8_IRQHandler:
 224              	.LFB43:
 182:Src/stm32f0xx_it.c **** 
 183:Src/stm32f0xx_it.c **** /**
 184:Src/stm32f0xx_it.c ****   * @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt thro
ARM GAS  /tmp/ccvM9wLY.s 			page 8


 185:Src/stm32f0xx_it.c ****   */
 186:Src/stm32f0xx_it.c **** void USART3_8_IRQHandler(void)
 187:Src/stm32f0xx_it.c **** {
 225              		.loc 1 187 1 is_stmt 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
 188:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN USART3_8_IRQn 0 */
 189:Src/stm32f0xx_it.c **** 
 190:Src/stm32f0xx_it.c ****   /* USER CODE END USART3_8_IRQn 0 */
 191:Src/stm32f0xx_it.c ****   HAL_UART_IRQHandler(&huart4);
 229              		.loc 1 191 3 view .LVU28
 187:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN USART3_8_IRQn 0 */
 230              		.loc 1 187 1 is_stmt 0 view .LVU29
 231 0000 10B5     		push	{r4, lr}
 232              	.LCFI4:
 233              		.cfi_def_cfa_offset 8
 234              		.cfi_offset 4, -8
 235              		.cfi_offset 14, -4
 236              		.loc 1 191 3 view .LVU30
 237 0002 0348     		ldr	r0, .L16
 238 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 239              	.LVL6:
 192:Src/stm32f0xx_it.c ****   HAL_UART_IRQHandler(&huart6);
 240              		.loc 1 192 3 is_stmt 1 view .LVU31
 241 0008 0248     		ldr	r0, .L16+4
 242 000a FFF7FEFF 		bl	HAL_UART_IRQHandler
 243              	.LVL7:
 193:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN USART3_8_IRQn 1 */
 194:Src/stm32f0xx_it.c **** 
 195:Src/stm32f0xx_it.c ****     
 196:Src/stm32f0xx_it.c **** 
 197:Src/stm32f0xx_it.c ****   /* USER CODE END USART3_8_IRQn 1 */
 198:Src/stm32f0xx_it.c **** }
 244              		.loc 1 198 1 is_stmt 0 view .LVU32
 245              		@ sp needed
 246 000e 10BD     		pop	{r4, pc}
 247              	.L17:
 248              		.align	2
 249              	.L16:
 250 0010 00000000 		.word	huart4
 251 0014 00000000 		.word	huart6
 252              		.cfi_endproc
 253              	.LFE43:
 255              		.text
 256              	.Letext0:
 257              		.file 2 "/usr/lib/gcc/arm-none-eabi/8.2018.q4/arm-none-eabi/include/machine/_default_types.h"
 258              		.file 3 "/usr/lib/gcc/arm-none-eabi/8.2018.q4/arm-none-eabi/include/sys/_stdint.h"
 259              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 260              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f091xc.h"
 261              		.file 6 "/usr/lib/gcc/arm-none-eabi/8.2018.q4/arm-none-eabi/include/sys/lock.h"
 262              		.file 7 "/usr/lib/gcc/arm-none-eabi/8.2018.q4/arm-none-eabi/include/sys/_types.h"
 263              		.file 8 "/usr/lib/gcc/arm-none-eabi/8.2018.q4/lib/gcc/arm-none-eabi/8.2.1/include/stddef.h"
 264              		.file 9 "/usr/lib/gcc/arm-none-eabi/8.2018.q4/arm-none-eabi/include/sys/reent.h"
 265              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 266              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 267              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
ARM GAS  /tmp/ccvM9wLY.s 			page 9


 268              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_uart.h"
 269              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
ARM GAS  /tmp/ccvM9wLY.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_it.c
     /tmp/ccvM9wLY.s:16     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccvM9wLY.s:25     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccvM9wLY.s:40     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccvM9wLY.s:48     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccvM9wLY.s:64     .text.EXTI4_15_IRQHandler:0000000000000000 $t
     /tmp/ccvM9wLY.s:72     .text.EXTI4_15_IRQHandler:0000000000000000 EXTI4_15_IRQHandler
     /tmp/ccvM9wLY.s:107    .text.DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler:0000000000000000 $t
     /tmp/ccvM9wLY.s:115    .text.DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler:0000000000000000 DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler
     /tmp/ccvM9wLY.s:138    .text.DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler:000000000000000c $d
     /tmp/ccvM9wLY.s:143    .text.TIM1_BRK_UP_TRG_COM_IRQHandler:0000000000000000 $t
     /tmp/ccvM9wLY.s:151    .text.TIM1_BRK_UP_TRG_COM_IRQHandler:0000000000000000 TIM1_BRK_UP_TRG_COM_IRQHandler
     /tmp/ccvM9wLY.s:174    .text.TIM1_BRK_UP_TRG_COM_IRQHandler:000000000000000c $d
     /tmp/ccvM9wLY.s:179    .text.USART2_IRQHandler:0000000000000000 $t
     /tmp/ccvM9wLY.s:187    .text.USART2_IRQHandler:0000000000000000 USART2_IRQHandler
     /tmp/ccvM9wLY.s:210    .text.USART2_IRQHandler:000000000000000c $d
     /tmp/ccvM9wLY.s:215    .text.USART3_8_IRQHandler:0000000000000000 $t
     /tmp/ccvM9wLY.s:223    .text.USART3_8_IRQHandler:0000000000000000 USART3_8_IRQHandler
     /tmp/ccvM9wLY.s:250    .text.USART3_8_IRQHandler:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_EXTI_IRQHandler
HAL_GPIO_TogglePin
HAL_DMA_IRQHandler
hdma_usart4_tx
HAL_TIM_IRQHandler
htim1
HAL_UART_IRQHandler
huart2
huart4
huart6
